import UIKit

{% for type in types.implementing.UICollectionViewFeature %}
class {{type.name}}Controller: UIViewController {
  private let layout: UICollectionViewFlowLayout
  private let collectionView: UICollectionView
  private let dataSource = {{type.name|replace:"View",""}}DataSource()

  init(layout: UICollectionViewFlowLayout, collectionView: UICollectionView?) {
    self.layout = layout
    if let collectionView = collectionView {
      self.collectionView = collectionView
    } else {
      self.collectionView = UICollectionView(frame: .zero, collectionViewLayout: self.layout)
    }
    super.init(nibName: nil, bundle: nil)
  }

  required init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  // MARK: - View lifecycle

  override func loadView() {
    self.view = collectionView
  }

  override func viewDidLoad() {
    super.viewDidLoad()
    collectionView.dataSource = dataSource
    collectionView.register({{type.name}}.self, forCellWithReuseIdentifier: "{{type.name}}")
  }

  func reload(with models: [{{type.name}}Model]) {
    dataSource.reload(collectionView, with: models)
  }
}

class {{type.name|replace:"View",""}}DataSource: NSObject, UICollectionViewDataSource {

  private var models = [{{type.name}}Model]()

  init(models: [{{type.name}}Model] = []) {
    self.models = models
    super.init()
  }

  // MARK: - Public API

  func model(at indexPath: IndexPath) -> {{type.name}}Model {
    return models[indexPath.item]
  }

  func reload(_ collectionView: UICollectionView,
              with models: [{{type.name}}Model]) {
    self.models = models
    collectionView.reloadData()
  }

  // MARK: - UICollectionViewDataSource

  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    return models.count
  }

  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "{{type.name}}", for: indexPath)
    let model = self.model(at: indexPath)

    if let view = cell as? {{type.name}} {
      {% for variable in type.variables %}
      {% for key in variable.annotations %}
        {% for variableType in variable.annotations[key] %}
          {% if forloop.last %}
      view.{{variable.annotations[key][variableType]}}
          {% endif %}
        {% endfor %}
      {% endfor %}
      {% endfor %}
    }

    return cell
  }
}

struct {{type.name}}Model: Hashable {
  {% for variable in type.variables %}
  {% for key in variable.annotations %}
    {% for variableType in variable.annotations[key] %}
    {% if forloop.last %}
  let {{key}}: {{variableType}}
    {% endif %}
    {% endfor %}
  {% endfor %}
  {% endfor %}
}
{% endfor %}

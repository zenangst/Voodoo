import UIKit

{% for type in types.implementing.TableViewComponent %}
class {{type.name|replace:"View",""|replace:"Cell",""}}ViewController: UIViewController {
  private let tableView: UITableView
  private let dataSource = {{type.name|replace:"Cell",""|replace:"Cell",""}}DataSource()

  init(tableView: UITableView? = nil) {
    if let tableView = tableView {
      self.tableView = tableView
    } else {
      self.tableView = UITableView(frame: .zero)
    }
    super.init(nibName: nil, bundle: nil)
  }

  required init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  // MARK: - View lifecycle

  override func loadView() {
    self.view = tableView
  }

  override func viewDidLoad() {
    super.viewDidLoad()
    tableView.dataSource = dataSource
    tableView.register({{type.name}}.self, forCellReuseIdentifier: "{{type.name}}")
  }

  // MARK: - Public API

  func reload(with models: [{{type.name}}Model]) {
    dataSource.reload(tableView, with: models)
  }
}

class {{type.name|replace:"Cell",""}}DataSource: NSObject, UITableViewDataSource {
  private var models = [{{type.name}}Model]()

  init(models: [{{type.name}}Model] = []) {
    self.models = models
    super.init()
  }

  // MARK: - Public API

  func model(at indexPath: IndexPath) -> {{type.name}}Model {
    return models[indexPath.item]
  }

  func reload(_ tableView: UITableView,
              with models: [{{type.name}}Model]) {
    self.models = models
    tableView.reloadData()
  }

  // MARK: - UITableViewDataSource

  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return models.count
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: "{{type.name}}", for: indexPath)
    let model = self.model(at: indexPath)

    if let view = cell as? {{type.name}} {
      {% for variable in type.variables %}
      {% for key in variable.annotations %}
        {% for variableType in variable.annotations[key] %}
          {% if forloop.last %}
      view.{{variable.annotations[key][variableType]}}
          {% endif %}
        {% endfor %}
      {% endfor %}
      {% endfor %}
    }

    return cell
  }
}

struct {{type.name}}Model: Hashable {
  {% for variable in type.variables %}
  {% for key in variable.annotations %}
    {% for variableType in variable.annotations[key] %}
    {% if forloop.last %}
  let {{key}}: {{variableType}}
    {% endif %}
    {% endfor %}
  {% endfor %}
  {% endfor %}
  {% for key in type.annotations %}
  let {{key}}: {{type.annotations[key]}}
  {% endfor %}
}
{% endfor %}
